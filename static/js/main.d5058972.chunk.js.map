{"version":3,"sources":["types/index.ts","logic/index.ts","selectors/index.ts","state/reducer.ts","state/index.ts","components/CellText.tsx","components/Cell.tsx","components/GridCellContainer.tsx","components/Grid.tsx","components/Confetti.tsx","components/GameOverDialog.tsx","components/OutOfFlagsDialog.tsx","components/Configuration.tsx","components/Minesweeper.tsx","App.tsx","index.tsx"],"names":["CellStatus","GameStatus","coordinateToIndex","height","x","y","getIndexAdjacentIndexes","index","width","getCoordinateAdjacentIndexes","Math","floor","adjacentIndexes","i","max","min","j","push","initBoard","mineCount","isSuperman","board","Array","mineIndexes","Set","size","rand","random","add","status","Visible","Hidden","isMine","has","adjacentMinesCount","filter","length","getCellByCoordinate","state","coordinate","getFlaggedCells","cell","Flagged","revealCell","InProgress","newBoard","Revealed","Lost","currAdjacentIndexes","currIndex","revealClearAdjacentCells","nonRevealedCells","Won","minesweeperReducer","action","type","payload","flaggedCells","showOutOfFlags","remainingFlags","find","flagCell","map","emptyContext","dispatch","MinesweeperContext","React","createContext","origMinesweeperReducer","CellText","className","adjacentMinesCountName","n","Cell","useContext","toLowerCase","onClick","e","shiftKey","memo","props","style","rowIndex","columnIndex","areEqual","Grid","forwardRef","ref","containerHeight","containerWidth","columnCount","columnWidth","rowCount","rowHeight","GridCellContainer","Confetti","data-testid","GameOverDialog","onClose","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","messageByStatus","DialogActions","Button","color","autoFocus","useStyles","makeStyles","theme","createStyles","configuration","padding","spacing","sliders","display","inputContainer","flex","buttons","textAlign","margin","newGame","useState","setWidth","setHeight","setMineCount","classes","Typography","gutterBottom","Slider","value","valueLabelDisplay","onChange","event","newValue","variant","FormControlLabel","control","Switch","checked","name","label","Minesweeper","flagsLeft","useRef","current","scrollTo","scrollLeft","scrollTop","OutOfFlagsDialog","initialState","App","persistedState","useReducer","localforage","setItem","Provider","a","getItem","ReactDOM","render","StrictMode","document","getElementById","init"],"mappings":"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","file":"static/js/main.d5058972.chunk.js","sourcesContent":["export enum CellStatus {\n  Hidden,\n  Revealed,\n  Flagged,\n  Visible,\n}\n\nexport enum GameStatus {\n  InProgress,\n  Won,\n  Lost,\n}\n\nexport type Cell = {\n  status: CellStatus;\n  isMine: boolean;\n  adjacentMinesCount: number;\n};\n\nexport type Coordinate = {\n  x: number;\n  y: number;\n};\n\nexport type Board = Array<Cell>;\n\nexport type State = {\n  status: GameStatus;\n  board: Board;\n  width: number;\n  height: number;\n  mineCount: number;\n  showOutOfFlags?: boolean;\n  isSuperman?: boolean;\n};\n\nexport type Action =\n  | { type: \"CELL_REVEAL\"; payload: Coordinate }\n  | { type: \"CELL_FLAG\"; payload: Coordinate }\n  | { type: \"NEW_GAME\"; payload: State }\n  | { type: \"HIDE_OUT_OF_FLAGS\" }\n  | { type: \"TOGGLE_SUPERMAN\"; payload: boolean };\n\nexport type Context = {\n  state: State;\n  dispatch: React.Dispatch<Action>;\n};\n","import { Board, Coordinate, CellStatus } from \"../types\";\n\nexport const coordinateToIndex = ({ x, y }: Coordinate, height: number) =>\n  x * height + y;\n\nconst getIndexAdjacentIndexes = (\n  index: number,\n  width: number,\n  height: number\n) => {\n  return getCoordinateAdjacentIndexes(\n    { x: Math.floor(index / height), y: index % height },\n    height,\n    width\n  );\n};\n\nconst getCoordinateAdjacentIndexes = (\n  { x, y }: Coordinate,\n  width: number,\n  height: number\n) => {\n  const adjacentIndexes: Array<number> = [];\n\n  for (let i = Math.max(x - 1, 0); i <= Math.min(x + 1, width - 1); i++) {\n    for (let j = Math.max(y - 1, 0); j <= Math.min(y + 1, height - 1); j++) {\n      if (i === x && j === y) {\n        continue;\n      }\n\n      adjacentIndexes.push(coordinateToIndex({ x: i, y: j }, height));\n    }\n  }\n\n  return adjacentIndexes;\n};\n\nexport const initBoard = (\n  width: number,\n  height: number,\n  mineCount: number,\n  isSuperman?: boolean\n) => {\n  const board: Board = new Array(width * height);\n  const mineIndexes = new Set<number>();\n\n  while (mineIndexes.size < mineCount) {\n    const rand = Math.floor(Math.random() * width * height);\n    mineIndexes.add(rand);\n  }\n\n  for (let i = 0; i < width * height; i++) {\n    board[i] = {\n      status: isSuperman ? CellStatus.Visible : CellStatus.Hidden,\n      isMine: mineIndexes.has(i),\n      adjacentMinesCount: getIndexAdjacentIndexes(\n        i,\n        width,\n        height\n      ).filter((index) => mineIndexes.has(index)).length,\n    };\n  }\n\n  return board;\n};\n\nexport const revealClearAdjacentCells = (\n  board: Board,\n  coordinate: Coordinate,\n  width: number,\n  height: number\n) => {\n  const newBoard = [...board];\n  const adjacentIndexes = new Set(\n    getCoordinateAdjacentIndexes(coordinate, width, height).filter(\n      (index) => board[index].status !== CellStatus.Revealed\n    )\n  );\n\n  for (const index of adjacentIndexes) {\n    const cell = newBoard[index];\n\n    if (\n      cell.status === CellStatus.Hidden ||\n      cell.status === CellStatus.Visible\n    ) {\n      newBoard[index] = {\n        ...cell,\n        status: CellStatus.Revealed,\n      };\n\n      if (!cell.adjacentMinesCount) {\n        const currAdjacentIndexes = getIndexAdjacentIndexes(\n          index,\n          width,\n          height\n        );\n\n        for (const currIndex of currAdjacentIndexes) {\n          adjacentIndexes.add(currIndex);\n        }\n      }\n    }\n  }\n\n  return newBoard;\n};\n","import { State, Coordinate, Cell, CellStatus } from \"../types\";\nimport { coordinateToIndex } from \"../logic\";\n\nexport const getCellByCoordinate = (\n  state: State,\n  coordinate: Coordinate\n): Cell => {\n  return state.board[coordinateToIndex(coordinate, state.height)];\n};\n\nexport const getFlaggedCells = (state: State): Cell[] => {\n  return state.board.filter((cell) => cell.status === CellStatus.Flagged);\n};\n","import {\n  State,\n  Action,\n  GameStatus,\n  Cell,\n  CellStatus,\n  Coordinate,\n  Board,\n} from \"../types\";\nimport { revealClearAdjacentCells, coordinateToIndex } from \"../logic\";\nimport { getCellByCoordinate, getFlaggedCells } from \"../selectors\";\n\nconst revealCell = ({\n  board,\n  coordinate,\n  cell,\n  width,\n  height,\n  mineCount,\n}: {\n  board: Board;\n  coordinate: Coordinate;\n  cell: Cell;\n  width: number;\n  height: number;\n  mineCount: number;\n}): [Board, GameStatus] => {\n  if (cell.status !== CellStatus.Hidden && cell.status !== CellStatus.Visible) {\n    return [board, GameStatus.InProgress];\n  }\n\n  let newBoard = [...board];\n  newBoard[coordinateToIndex(coordinate, height)] = {\n    ...cell,\n    status: CellStatus.Revealed,\n  };\n\n  if (cell.isMine) {\n    return [newBoard, GameStatus.Lost];\n  }\n\n  if (!cell.adjacentMinesCount) {\n    newBoard = revealClearAdjacentCells(newBoard, coordinate, width, height);\n  }\n  const nonRevealedCells = newBoard.filter(\n    (cell) => cell.status !== CellStatus.Revealed\n  );\n\n  return [\n    newBoard,\n    nonRevealedCells.length === mineCount\n      ? GameStatus.Won\n      : GameStatus.InProgress,\n  ];\n};\n\nconst flagCell = ({\n  board,\n  flaggedCells,\n  coordinate,\n  cell,\n  height,\n  mineCount,\n  isSuperman,\n}: {\n  board: Board;\n  flaggedCells: Cell[];\n  coordinate: Coordinate;\n  cell: Cell;\n  height: number;\n  mineCount: number;\n  isSuperman: boolean;\n}): [Board, GameStatus] => {\n  if (cell.status === CellStatus.Revealed) {\n    return [board, GameStatus.InProgress];\n  }\n\n  const remainingFlags = mineCount - flaggedCells.length;\n  const newBoard = [...board];\n  newBoard[coordinateToIndex(coordinate, height)] = {\n    ...cell,\n    status:\n      cell.status === CellStatus.Hidden || cell.status === CellStatus.Visible\n        ? CellStatus.Flagged\n        : isSuperman\n        ? CellStatus.Visible\n        : CellStatus.Hidden,\n  };\n\n  if (\n    cell.isMine &&\n    remainingFlags === 1 &&\n    !flaggedCells.find((cell) => !cell.isMine)\n  ) {\n    return [newBoard, GameStatus.Won];\n  }\n\n  return [newBoard, GameStatus.InProgress];\n};\n\nconst minesweeperReducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"CELL_REVEAL\": {\n      if (state.status !== GameStatus.InProgress) {\n        return state;\n      }\n\n      const cell = getCellByCoordinate(state, action.payload);\n      const [board, status] = revealCell({\n        ...state,\n        cell,\n        coordinate: action.payload,\n      });\n\n      return { ...state, board, status };\n    }\n\n    case \"CELL_FLAG\": {\n      if (state.status !== GameStatus.InProgress) {\n        return state;\n      }\n\n      const flaggedCells = getFlaggedCells(state);\n      const cell = getCellByCoordinate(state, action.payload);\n      const remainingFlags = state.mineCount - flaggedCells.length;\n\n      if (!remainingFlags && cell.status !== CellStatus.Flagged) {\n        return { ...state, showOutOfFlags: true };\n      }\n\n      const [board, status] = flagCell({\n        ...state,\n        flaggedCells,\n        cell,\n        coordinate: action.payload,\n        isSuperman: !!state.isSuperman,\n      });\n      return { ...state, board, status };\n    }\n\n    case \"NEW_GAME\": {\n      return action.payload;\n    }\n\n    case \"HIDE_OUT_OF_FLAGS\": {\n      return { ...state, showOutOfFlags: false };\n    }\n\n    case \"TOGGLE_SUPERMAN\": {\n      return {\n        ...state,\n        board: state.board.map((cell) => {\n          if (action.payload) {\n            if (cell.status === CellStatus.Hidden) {\n              return { ...cell, status: CellStatus.Visible };\n            }\n\n            return cell;\n          } else {\n            if (cell.status === CellStatus.Visible) {\n              return { ...cell, status: CellStatus.Hidden };\n            }\n\n            return cell;\n          }\n        }),\n        isSuperman: action.payload,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default minesweeperReducer;\n","import React from \"react\";\nimport { Context, GameStatus } from \"../types\";\nimport origMinesweeperReducer from \"./reducer\";\n\nexport const emptyContext: Context = {\n  state: {\n    status: GameStatus.InProgress,\n    board: [],\n    width: 1,\n    height: 2,\n    mineCount: 3,\n  },\n  dispatch: () => {},\n};\nexport const MinesweeperContext = React.createContext<Context>(emptyContext);\nexport const minesweeperReducer = origMinesweeperReducer;\n","import React from \"react\";\nimport { Cell, CellStatus } from \"../types\";\nimport \"./CellText.css\";\n\nconst CellText = ({ cell }: { cell: Cell }) => {\n  if (\n    cell.status === CellStatus.Revealed ||\n    cell.status === CellStatus.Visible\n  ) {\n    if (cell.isMine) {\n      return <i className=\"material-icons bomb\">new_releases</i>;\n    }\n\n    return <span>{cell.adjacentMinesCount || \"\"}</span>;\n  }\n\n  if (cell.status === CellStatus.Flagged) {\n    return <i className=\"material-icons flag\">tour</i>;\n  }\n\n  return <span></span>;\n};\n\nexport default CellText;\n","import React, { useContext } from \"react\";\nimport { Coordinate, CellStatus } from \"../types\";\nimport { MinesweeperContext } from \"../state\";\nimport { getCellByCoordinate } from \"../selectors\";\nimport CellText from \"./CellText\";\n\nconst adjacentMinesCountName = (n: number) => {\n  switch (n) {\n    case 1:\n      return \"one\";\n    case 2:\n      return \"two\";\n    case 3:\n      return \"three\";\n    case 4:\n      return \"four\";\n    case 5:\n      return \"five\";\n    case 6:\n      return \"six\";\n    case 7:\n      return \"seven\";\n    case 8:\n      return \"eight\";\n    default:\n      return \"\";\n  }\n};\n\nconst Cell = (coordinate: Coordinate) => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const cell = getCellByCoordinate(state, coordinate);\n  const onClick = (e: React.MouseEvent) => {\n    if (!e.shiftKey) {\n      dispatch({ type: \"CELL_REVEAL\", payload: coordinate });\n    } else {\n      dispatch({ type: \"CELL_FLAG\", payload: coordinate });\n    }\n  };\n\n  return (\n    <div\n      className={`cell-content ${CellStatus[\n        cell.status\n      ].toLowerCase()} ${adjacentMinesCountName(cell.adjacentMinesCount)}`}\n      onClick={onClick}\n    >\n      <CellText cell={cell} />\n    </div>\n  );\n};\n\nexport default Cell;\n","import React from \"react\";\nimport { GridChildComponentProps, areEqual } from \"react-window\";\nimport Cell from \"./Cell\";\nimport \"./GridCellContainer.css\";\n\nconst GridCellContainer = (props: GridChildComponentProps) => (\n  <div style={props.style}>\n    <div className=\"cell\">\n      <Cell y={props.rowIndex} x={props.columnIndex} />\n    </div>\n  </div>\n);\n\nexport default React.memo(GridCellContainer, areEqual);\n","import React, { useContext } from \"react\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { FixedSizeGrid } from \"react-window\";\nimport { MinesweeperContext } from \"../state\";\nimport GridCellContainer from \"./GridCellContainer\";\n\nconst Grid = React.forwardRef<FixedSizeGrid>((props, ref) => {\n  const { state } = useContext(MinesweeperContext);\n\n  return (\n    <AutoSizer>\n      {({ height: containerHeight, width: containerWidth }) => {\n        return (\n          <FixedSizeGrid\n            className=\"minesweeper-grid\"\n            columnCount={state.width}\n            columnWidth={50}\n            height={containerHeight}\n            rowCount={state.height}\n            rowHeight={50}\n            width={containerWidth}\n            ref={ref}\n          >\n            {GridCellContainer}\n          </FixedSizeGrid>\n        );\n      }}\n    </AutoSizer>\n  );\n});\n\nexport default Grid;\n","import React from \"react\";\nimport \"./Confetti.css\";\n\nconst Confetti = () => {\n  return (\n    <div data-testid=\"confetti\">\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n    </div>\n  );\n};\n\nexport default Confetti;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { GameStatus } from \"../types\";\n\nconst messageByStatus = (status: GameStatus) => {\n  switch (status) {\n    case GameStatus.Won: {\n      return \"You win!\";\n    }\n    case GameStatus.Lost: {\n      return \"You lose :(\";\n    }\n    case GameStatus.InProgress: {\n      return \"Restarting...\";\n    }\n  }\n};\n\nconst GameOverDialog = ({\n  status,\n  onClose,\n}: {\n  status: GameStatus;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      open={status !== GameStatus.InProgress}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {messageByStatus(status)}\n      </DialogTitle>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" autoFocus>\n          Play again\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default GameOverDialog;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst GameOverDialog = ({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      open={open}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">No more flags left.</DialogTitle>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" autoFocus>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default GameOverDialog;\n","import React, { useState, useContext } from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { MinesweeperContext } from \"../state\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    configuration: {\n      padding: theme.spacing(1),\n    },\n    sliders: {\n      display: \"flex\",\n    },\n    inputContainer: {\n      padding: \"10px\",\n      flex: 1,\n    },\n    buttons: {\n      textAlign: \"left\",\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n    },\n  })\n);\n\nconst Configuration = ({\n  newGame,\n}: {\n  newGame: (width: number, height: number, mineCount: number) => void;\n}) => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const [width, setWidth] = useState<number>(state.width);\n  const [height, setHeight] = useState<number>(state.height);\n  const [mineCount, setMineCount] = useState<number>(state.mineCount);\n  const classes = useStyles();\n\n  const handleWidthChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setWidth(newValue as number);\n  };\n\n  const handleHeightChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setHeight(newValue as number);\n  };\n\n  const handleMineCountChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setMineCount(newValue as number);\n  };\n\n  return (\n    <div className={classes.configuration}>\n      <div className={classes.sliders}>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Width</Typography>\n          <Slider\n            value={width}\n            min={3}\n            max={300}\n            valueLabelDisplay=\"auto\"\n            onChange={handleWidthChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Height</Typography>\n          <Slider\n            value={height}\n            min={3}\n            max={300}\n            valueLabelDisplay=\"auto\"\n            onChange={handleHeightChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Mines</Typography>\n          <Slider\n            value={mineCount}\n            min={1}\n            max={width * height}\n            valueLabelDisplay=\"auto\"\n            onChange={handleMineCountChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n      </div>\n      <div className={classes.buttons}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() =>\n            newGame(width, height, Math.min(mineCount, width * height))\n          }\n        >\n          New Game\n        </Button>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={state.isSuperman}\n              onChange={() =>\n                dispatch({\n                  type: \"TOGGLE_SUPERMAN\",\n                  payload: !state.isSuperman,\n                })\n              }\n              name=\"superman\"\n            />\n          }\n          label=\"Superman\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(Configuration);\n","import React, { useContext, useRef } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { FixedSizeGrid } from \"react-window\";\nimport Grid from \"./Grid\";\nimport Confetti from \"./Confetti\";\nimport GameOverDialog from \"./GameOverDialog\";\nimport OutOfFlagsDialog from \"./OutOfFlagsDialog\";\nimport Configuration from \"./Configuration\";\nimport { getFlaggedCells } from \"../selectors\";\nimport { MinesweeperContext } from \"../state\";\nimport { GameStatus } from \"../types\";\nimport { initBoard } from \"../logic\";\nimport \"./Minesweeper.css\";\n\nconst Minesweeper = () => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const flagsLeft = state.mineCount - getFlaggedCells(state).length;\n  const ref = useRef<FixedSizeGrid>(null);\n\n  return (\n    <div className=\"minesweeper-container\">\n      {state.status === GameStatus.Won && <Confetti />}\n      <Configuration\n        newGame={(width, height, mineCount) => {\n          dispatch({\n            type: \"NEW_GAME\",\n            payload: {\n              status: GameStatus.InProgress,\n              width,\n              height,\n              mineCount,\n              board: initBoard(width, height, mineCount, state.isSuperman),\n              isSuperman: state.isSuperman,\n            },\n          });\n          ref.current?.scrollTo({ scrollLeft: 0, scrollTop: 0 });\n        }}\n      />\n      <OutOfFlagsDialog\n        open={!!state.showOutOfFlags}\n        onClose={() => dispatch({ type: \"HIDE_OUT_OF_FLAGS\" })}\n      />\n      <GameOverDialog\n        status={state.status}\n        onClose={() => {\n          dispatch({\n            type: \"NEW_GAME\",\n            payload: {\n              ...state,\n              status: GameStatus.InProgress,\n              board: initBoard(\n                state.width,\n                state.height,\n                state.mineCount,\n                state.isSuperman\n              ),\n            },\n          });\n          ref.current?.scrollTo({ scrollLeft: 0, scrollTop: 0 });\n        }}\n      />\n      <Typography gutterBottom>Flags left: {flagsLeft}</Typography>\n      <div className=\"grid-container\">\n        <Grid ref={ref} />\n      </div>\n    </div>\n  );\n};\n\nexport default Minesweeper;\n","import React, { useReducer } from \"react\";\nimport localforage from \"localforage\";\nimport { MinesweeperContext, minesweeperReducer } from \"./state\";\nimport { initBoard } from \"./logic\";\nimport Minesweeper from \"./components/Minesweeper\";\nimport { GameStatus, State } from \"./types\";\n\nconst width = 10;\nconst height = 10;\nconst mineCount = 10;\n\nconst initialState = {\n  status: GameStatus.InProgress,\n  board: initBoard(width, height, mineCount),\n  width,\n  height,\n  mineCount,\n};\n\nfunction App({ persistedState }: { persistedState: State }) {\n  const [state, dispatch] = useReducer(\n    minesweeperReducer,\n    persistedState || initialState\n  );\n  localforage.setItem(\"state\", state);\n\n  return (\n    <MinesweeperContext.Provider value={{ state, dispatch }}>\n      <Minesweeper />\n    </MinesweeperContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport localforage from \"localforage\";\nimport { State } from \"./types\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst init = async () => {\n  const persistedState: State = await localforage.getItem(\"state\");\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App persistedState={persistedState} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\ninit();\n"],"sourceRoot":""}