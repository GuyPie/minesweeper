{"version":3,"sources":["types/index.ts","logic/index.ts","selectors/index.ts","state/reducer.ts","state/index.ts","components/Cell.tsx","components/CellContainer.tsx","components/GridCellContainer.tsx","components/Grid.tsx","components/Confetti.tsx","components/GameOverDialog.tsx","components/OutOfFlagsDialog.tsx","components/Configuration.tsx","components/Minesweeper.tsx","App.tsx","index.tsx"],"names":["CellStatus","GameStatus","getAdjacentCoordinates","board","width","height","x","y","adjacentCoordinates","i","Math","max","min","j","push","initBoard","mineCount","isSuperman","initialCell","status","Visible","Hidden","isMine","adjacentMinesCount","Array","fill","undefined","map","mineIndexes","Set","size","rand","floor","random","add","index","has","filter","cell","length","getCellByCoordinate","state","coordinate","getFlaggedCells","Flagged","revealCell","InProgress","newBoard","Revealed","Lost","currCoordinate","shift","revealClearAdjacentCells","nonRevealedCells","Won","minesweeperReducer","action","type","payload","flaggedCells","showOutOfFlags","remainingFlags","find","flagCell","emptyContext","dispatch","MinesweeperContext","React","createContext","origMinesweeperReducer","adjacentMinesCountName","n","CellText","className","Cell","onClick","toLowerCase","CellContainer","useContext","e","shiftKey","GridCellContainer","memo","props","style","rowIndex","columnIndex","areEqual","Grid","forwardRef","ref","containerHeight","containerWidth","columnCount","columnWidth","rowCount","rowHeight","Confetti","data-testid","GameOverDialog","onClose","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","messageByStatus","DialogActions","Button","color","autoFocus","useStyles","makeStyles","theme","createStyles","configuration","padding","spacing","sliders","display","inputContainer","flex","buttons","textAlign","margin","Configuration","newGame","useState","setWidth","setHeight","setMineCount","classes","Typography","gutterBottom","Slider","value","valueLabelDisplay","onChange","event","newValue","variant","FormControlLabel","control","Switch","checked","name","label","Minesweeper","flagsLeft","useRef","current","scrollTo","scrollLeft","scrollTop","OutOfFlagsDialog","stateString","localStorage","getItem","initialState","JSON","parse","App","useReducer","setItem","stringify","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6e47410.chunk.js","sourcesContent":["export enum CellStatus {\n  Hidden,\n  Revealed,\n  Flagged,\n  Visible,\n}\n\nexport enum GameStatus {\n  InProgress,\n  Won,\n  Lost,\n}\n\nexport type Cell = {\n  status: CellStatus;\n  isMine: boolean;\n  adjacentMinesCount: number;\n};\n\nexport type Coordinate = {\n  x: number;\n  y: number;\n};\n\nexport type Board = Array<Cell>;\n\nexport type State = {\n  status: GameStatus;\n  board: Board;\n  width: number;\n  height: number;\n  mineCount: number;\n  showOutOfFlags?: boolean;\n  isSuperman?: boolean;\n};\n\nexport type Action =\n  | { type: \"CELL_REVEAL\"; payload: Coordinate }\n  | { type: \"CELL_FLAG\"; payload: Coordinate }\n  | { type: \"NEW_GAME\"; payload: State }\n  | { type: \"HIDE_OUT_OF_FLAGS\" }\n  | { type: \"TOGGLE_SUPERMAN\"; payload: boolean };\n\nexport type Context = {\n  state: State;\n  dispatch: React.Dispatch<Action>;\n};\n","import { Board, Coordinate, Cell, CellStatus } from \"../types\";\n\nconst getAdjacentCoordinates = (\n  board: Board,\n  { x, y }: Coordinate,\n  width: number,\n  height: number\n) => {\n  const adjacentCoordinates: Coordinate[] = [];\n\n  for (let i = Math.max(x - 1, 0); i <= Math.min(x + 1, width - 1); i++) {\n    for (let j = Math.max(y - 1, 0); j <= Math.min(y + 1, height - 1); j++) {\n      if (i === x && j === y) {\n        continue;\n      }\n\n      adjacentCoordinates.push({ x: i, y: j });\n    }\n  }\n\n  return adjacentCoordinates;\n};\n\nexport const initBoard = (\n  width: number,\n  height: number,\n  mineCount: number,\n  isSuperman?: boolean\n) => {\n  const initialCell: Cell = {\n    status: isSuperman ? CellStatus.Visible : CellStatus.Hidden,\n    isMine: false,\n    adjacentMinesCount: 0,\n  };\n\n  const board: Board = new Array(width * height).fill(undefined).map(() => ({\n    ...initialCell,\n  }));\n\n  const mineIndexes = new Set<number>();\n\n  while (mineIndexes.size < mineCount) {\n    let rand = Math.floor(Math.random() * width * height);\n    mineIndexes.add(rand);\n  }\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const index = x * height + y;\n      board[index].isMine = mineIndexes.has(index);\n      board[index].adjacentMinesCount = getAdjacentCoordinates(\n        board,\n        { x, y },\n        width,\n        height\n      ).filter((cell) => mineIndexes.has(cell.x * height + cell.y)).length;\n    }\n  }\n\n  return board;\n};\n\nexport const revealClearAdjacentCells = (\n  board: Board,\n  coordinate: Coordinate,\n  width: number,\n  height: number\n) => {\n  const newBoard = [...board];\n  let adjacentCoordinates = getAdjacentCoordinates(\n    board,\n    coordinate,\n    width,\n    height\n  ).filter((currCoordinate) => {\n    const cell = board[currCoordinate.x * height + currCoordinate.y];\n    return cell.status !== CellStatus.Revealed;\n  });\n\n  while (adjacentCoordinates.length) {\n    const coordinate = adjacentCoordinates.shift()!;\n    const cell = newBoard[coordinate.x * height + coordinate.y];\n\n    if (\n      cell.status === CellStatus.Hidden ||\n      cell.status === CellStatus.Visible\n    ) {\n      newBoard[coordinate.x * height + coordinate.y] = {\n        ...cell,\n        status: CellStatus.Revealed,\n      };\n\n      if (!cell.adjacentMinesCount) {\n        adjacentCoordinates.push(\n          ...getAdjacentCoordinates(board, coordinate, width, height).filter(\n            (currCoordinate) => {\n              const cell = board[currCoordinate.x * height + currCoordinate.y];\n              return (\n                cell.status === CellStatus.Hidden ||\n                cell.status === CellStatus.Visible\n              );\n            }\n          )\n        );\n      }\n    }\n  }\n\n  return newBoard;\n};\n","import { State, Coordinate, Cell, CellStatus } from \"../types\";\n\nexport const getCellByCoordinate = (\n  state: State,\n  coordinate: Coordinate\n): Cell => {\n  return state.board[coordinate.x * state.height + coordinate.y];\n};\n\nexport const getFlaggedCells = (state: State): Cell[] => {\n  return state.board.filter((cell) => cell.status === CellStatus.Flagged);\n};\n","import {\n  State,\n  Action,\n  GameStatus,\n  Cell,\n  CellStatus,\n  Coordinate,\n  Board,\n} from \"../types\";\nimport { revealClearAdjacentCells } from \"../logic\";\nimport { getCellByCoordinate, getFlaggedCells } from \"../selectors\";\n\nconst revealCell = ({\n  board,\n  coordinate,\n  cell,\n  width,\n  height,\n  mineCount,\n}: {\n  board: Board;\n  coordinate: Coordinate;\n  cell: Cell;\n  width: number;\n  height: number;\n  mineCount: number;\n}): [Board, GameStatus] => {\n  if (cell.status !== CellStatus.Hidden && cell.status !== CellStatus.Visible) {\n    return [board, GameStatus.InProgress];\n  }\n\n  let newBoard = [...board];\n  newBoard[coordinate.x * height + coordinate.y] = {\n    ...cell,\n    status: CellStatus.Revealed,\n  };\n\n  if (cell.isMine) {\n    return [newBoard, GameStatus.Lost];\n  }\n\n  if (!cell.adjacentMinesCount) {\n    newBoard = revealClearAdjacentCells(newBoard, coordinate, width, height);\n  }\n  const nonRevealedCells = newBoard.filter(\n    (cell) => cell.status !== CellStatus.Revealed\n  );\n\n  return [\n    newBoard,\n    nonRevealedCells.length === mineCount\n      ? GameStatus.Won\n      : GameStatus.InProgress,\n  ];\n};\n\nconst flagCell = ({\n  board,\n  flaggedCells,\n  coordinate,\n  cell,\n  height,\n  mineCount,\n  isSuperman,\n}: {\n  board: Board;\n  flaggedCells: Cell[];\n  coordinate: Coordinate;\n  cell: Cell;\n  height: number;\n  mineCount: number;\n  isSuperman: boolean;\n}): [Board, GameStatus] => {\n  if (cell.status === CellStatus.Revealed) {\n    return [board, GameStatus.InProgress];\n  }\n\n  const remainingFlags = mineCount - flaggedCells.length;\n  const newBoard = [...board];\n  newBoard[coordinate.x * height + coordinate.y] = {\n    ...cell,\n    status:\n      cell.status === CellStatus.Hidden || cell.status === CellStatus.Visible\n        ? CellStatus.Flagged\n        : isSuperman\n        ? CellStatus.Visible\n        : CellStatus.Hidden,\n  };\n\n  if (\n    cell.isMine &&\n    remainingFlags === 1 &&\n    !flaggedCells.find((cell) => !cell.isMine)\n  ) {\n    return [newBoard, GameStatus.Won];\n  }\n\n  return [newBoard, GameStatus.InProgress];\n};\n\nconst minesweeperReducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"CELL_REVEAL\": {\n      if (state.status !== GameStatus.InProgress) {\n        return state;\n      }\n\n      const cell = getCellByCoordinate(state, action.payload);\n      const [board, status] = revealCell({\n        ...state,\n        cell,\n        coordinate: action.payload,\n      });\n\n      return { ...state, board, status };\n    }\n\n    case \"CELL_FLAG\": {\n      if (state.status !== GameStatus.InProgress) {\n        return state;\n      }\n\n      const flaggedCells = getFlaggedCells(state);\n      const cell = getCellByCoordinate(state, action.payload);\n      const remainingFlags = state.mineCount - flaggedCells.length;\n\n      if (!remainingFlags && cell.status !== CellStatus.Flagged) {\n        return { ...state, showOutOfFlags: true };\n      }\n\n      const [board, status] = flagCell({\n        ...state,\n        flaggedCells,\n        cell,\n        coordinate: action.payload,\n        isSuperman: !!state.isSuperman,\n      });\n      return { ...state, board, status };\n    }\n\n    case \"NEW_GAME\": {\n      return action.payload;\n    }\n\n    case \"HIDE_OUT_OF_FLAGS\": {\n      return { ...state, showOutOfFlags: false };\n    }\n\n    case \"TOGGLE_SUPERMAN\": {\n      return {\n        ...state,\n        board: state.board.map((cell) => {\n          if (action.payload) {\n            if (cell.status === CellStatus.Hidden) {\n              return { ...cell, status: CellStatus.Visible };\n            }\n\n            return cell;\n          } else {\n            if (cell.status === CellStatus.Visible) {\n              return { ...cell, status: CellStatus.Hidden };\n            }\n\n            return cell;\n          }\n        }),\n        isSuperman: action.payload,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default minesweeperReducer;\n","import React from \"react\";\nimport { Context, GameStatus } from \"../types\";\nimport origMinesweeperReducer from \"./reducer\";\n\nexport const emptyContext: Context = {\n  state: {\n    status: GameStatus.InProgress,\n    board: [],\n    width: 1,\n    height: 2,\n    mineCount: 3,\n  },\n  dispatch: () => {},\n};\nexport const MinesweeperContext = React.createContext<Context>(emptyContext);\nexport const minesweeperReducer = origMinesweeperReducer;\n","import React from \"react\";\nimport { Cell as CellType, CellStatus } from \"../types\";\nimport \"./Cell.css\";\n\nconst adjacentMinesCountName = (n: number) => {\n  switch (n) {\n    case 1:\n      return \"one\";\n    case 2:\n      return \"two\";\n    case 3:\n      return \"three\";\n    case 4:\n      return \"four\";\n    case 5:\n      return \"five\";\n    case 6:\n      return \"six\";\n    case 7:\n      return \"seven\";\n    case 8:\n      return \"eight\";\n    default:\n      return \"\";\n  }\n};\n\nconst CellText = ({ cell }: { cell: CellType }) => {\n  if (\n    cell.status === CellStatus.Revealed ||\n    cell.status === CellStatus.Visible\n  ) {\n    if (cell.isMine) {\n      return <i className=\"material-icons bomb\">new_releases</i>;\n    }\n\n    return <span>{cell.adjacentMinesCount || \"\"}</span>;\n  }\n\n  if (cell.status === CellStatus.Flagged) {\n    return <i className=\"material-icons flag\">tour</i>;\n  }\n\n  return <span></span>;\n};\n\nconst Cell = ({\n  cell,\n  onClick,\n}: {\n  cell: CellType;\n  onClick: (e: React.MouseEvent) => void;\n}) => {\n  return (\n    <div\n      className={`cell-content ${CellStatus[\n        cell.status\n      ].toLowerCase()} ${adjacentMinesCountName(cell.adjacentMinesCount)}`}\n      onClick={onClick}\n    >\n      <CellText cell={cell} />\n    </div>\n  );\n};\n\nexport default Cell;\n","import React, { useContext } from \"react\";\nimport { Coordinate } from \"../types\";\nimport { MinesweeperContext } from \"../state\";\nimport { getCellByCoordinate } from \"../selectors\";\nimport Cell from \"./Cell\";\n\nconst CellContainer = (coordinate: Coordinate) => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const cell = getCellByCoordinate(state, coordinate);\n  const onClick = (e: React.MouseEvent) => {\n    if (!e.shiftKey) {\n      dispatch({ type: \"CELL_REVEAL\", payload: coordinate });\n    } else {\n      dispatch({ type: \"CELL_FLAG\", payload: coordinate });\n    }\n  };\n\n  return <Cell cell={cell} onClick={onClick} />;\n};\n\nexport default CellContainer;\n","import React from \"react\";\nimport { GridChildComponentProps, areEqual } from \"react-window\";\nimport CellContainer from \"./CellContainer\";\nimport \"./GridCellContainer.css\";\n\nconst GridCellContainer = React.memo(\n  (props: GridChildComponentProps) => (\n    <div style={props.style}>\n      <div className=\"cell\">\n        <CellContainer y={props.rowIndex} x={props.columnIndex} />\n      </div>\n    </div>\n  ),\n  areEqual\n);\n\nexport default GridCellContainer;\n","import React, { useContext } from \"react\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { FixedSizeGrid } from \"react-window\";\nimport { MinesweeperContext } from \"../state\";\nimport GridCellContainer from \"./GridCellContainer\";\n\nconst Grid = React.forwardRef<FixedSizeGrid>((props, ref) => {\n  const { state } = useContext(MinesweeperContext);\n\n  return (\n    <AutoSizer>\n      {({ height: containerHeight, width: containerWidth }) => {\n        return (\n          <FixedSizeGrid\n            className=\"minesweeper-grid\"\n            columnCount={state.width}\n            columnWidth={50}\n            height={containerHeight}\n            rowCount={state.height}\n            rowHeight={50}\n            width={containerWidth}\n            ref={ref}\n          >\n            {GridCellContainer}\n          </FixedSizeGrid>\n        );\n      }}\n    </AutoSizer>\n  );\n});\n\nexport default Grid;\n","import React from \"react\";\nimport \"./Confetti.css\";\n\nconst Confetti = () => {\n  return (\n    <div data-testid=\"confetti\">\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n    </div>\n  );\n};\n\nexport default Confetti;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { GameStatus } from \"../types\";\n\nconst messageByStatus = (status: GameStatus) => {\n  switch (status) {\n    case GameStatus.Won: {\n      return \"You win!\";\n    }\n    case GameStatus.Lost: {\n      return \"You lose :(\";\n    }\n    case GameStatus.InProgress: {\n      return \"Restarting...\";\n    }\n  }\n};\n\nconst GameOverDialog = ({\n  status,\n  onClose,\n}: {\n  status: GameStatus;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      open={status !== GameStatus.InProgress}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {messageByStatus(status)}\n      </DialogTitle>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" autoFocus>\n          Play again\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default GameOverDialog;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst GameOverDialog = ({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      open={open}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">No more flags left.</DialogTitle>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" autoFocus>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default GameOverDialog;\n","import React, { useState, useContext } from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { MinesweeperContext } from \"../state\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    configuration: {\n      padding: theme.spacing(1),\n    },\n    sliders: {\n      display: \"flex\",\n    },\n    inputContainer: {\n      padding: \"10px\",\n      flex: 1,\n    },\n    buttons: {\n      textAlign: \"left\",\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n    },\n  })\n);\n\nconst Configuration = ({\n  newGame,\n}: {\n  newGame: (width: number, height: number, mineCount: number) => void;\n}) => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const [width, setWidth] = useState<number>(state.width);\n  const [height, setHeight] = useState<number>(state.height);\n  const [mineCount, setMineCount] = useState<number>(state.mineCount);\n  const classes = useStyles();\n\n  const handleWidthChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setWidth(newValue as number);\n  };\n\n  const handleHeightChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setHeight(newValue as number);\n  };\n\n  const handleMineCountChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setMineCount(newValue as number);\n  };\n\n  return (\n    <div className={classes.configuration}>\n      <div className={classes.sliders}>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Width</Typography>\n          <Slider\n            value={width}\n            min={3}\n            max={300}\n            valueLabelDisplay=\"auto\"\n            onChange={handleWidthChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Height</Typography>\n          <Slider\n            value={height}\n            min={3}\n            max={300}\n            valueLabelDisplay=\"auto\"\n            onChange={handleHeightChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Mines</Typography>\n          <Slider\n            value={mineCount}\n            min={1}\n            max={width * height}\n            valueLabelDisplay=\"auto\"\n            onChange={handleMineCountChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n      </div>\n      <div className={classes.buttons}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => newGame(width, height, mineCount)}\n        >\n          New Game\n        </Button>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={state.isSuperman}\n              onChange={() =>\n                dispatch({\n                  type: \"TOGGLE_SUPERMAN\",\n                  payload: !state.isSuperman,\n                })\n              }\n              name=\"superman\"\n            />\n          }\n          label=\"Superman\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Configuration;\n","import React, { useContext, useRef } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { FixedSizeGrid } from \"react-window\";\nimport Grid from \"./Grid\";\nimport Confetti from \"./Confetti\";\nimport GameOverDialog from \"./GameOverDialog\";\nimport OutOfFlagsDialog from \"./OutOfFlagsDialog\";\nimport Configuration from \"./Configuration\";\nimport { getFlaggedCells } from \"../selectors\";\nimport { MinesweeperContext } from \"../state\";\nimport { GameStatus } from \"../types\";\nimport { initBoard } from \"../logic\";\nimport \"./Minesweeper.css\";\n\nconst Minesweeper = () => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const flagsLeft = state.mineCount - getFlaggedCells(state).length;\n  const ref = useRef<FixedSizeGrid>(null);\n\n  return (\n    <div className=\"minesweeper-container\">\n      {state.status === GameStatus.Won && <Confetti />}\n      <Configuration\n        newGame={(width, height, mineCount) => {\n          dispatch({\n            type: \"NEW_GAME\",\n            payload: {\n              status: GameStatus.InProgress,\n              width,\n              height,\n              mineCount,\n              board: initBoard(width, height, mineCount, state.isSuperman),\n              isSuperman: state.isSuperman,\n            },\n          });\n          ref.current?.scrollTo({ scrollLeft: 0, scrollTop: 0 });\n        }}\n      />\n      <OutOfFlagsDialog\n        open={!!state.showOutOfFlags}\n        onClose={() => dispatch({ type: \"HIDE_OUT_OF_FLAGS\" })}\n      />\n      <GameOverDialog\n        status={state.status}\n        onClose={() => {\n          dispatch({\n            type: \"NEW_GAME\",\n            payload: {\n              ...state,\n              status: GameStatus.InProgress,\n              board: initBoard(\n                state.width,\n                state.height,\n                state.mineCount,\n                state.isSuperman\n              ),\n            },\n          });\n          ref.current?.scrollTo({ scrollLeft: 0, scrollTop: 0 });\n        }}\n      />\n      <Typography gutterBottom>Flags left: {flagsLeft}</Typography>\n      <div className=\"grid-container\">\n        <Grid ref={ref} />\n      </div>\n    </div>\n  );\n};\n\nexport default Minesweeper;\n","import React, { useReducer } from \"react\";\nimport { MinesweeperContext, minesweeperReducer } from \"./state\";\nimport { initBoard } from \"./logic\";\nimport Minesweeper from \"./components/Minesweeper\";\nimport { State, GameStatus } from \"./types\";\n\nconst width = 10;\nconst height = 10;\nconst mineCount = 10;\n\nconst stateString = localStorage.getItem(\"state\");\nconst initialState: State = stateString\n  ? (JSON.parse(stateString) as State)\n  : {\n      status: GameStatus.InProgress,\n      board: initBoard(width, height, mineCount),\n      width,\n      height,\n      mineCount,\n    };\n\nfunction App() {\n  const [state, dispatch] = useReducer(minesweeperReducer, initialState);\n  localStorage.setItem(\"state\", JSON.stringify(state));\n\n  return (\n    <MinesweeperContext.Provider value={{ state, dispatch }}>\n      <Minesweeper />\n    </MinesweeperContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}