{"version":3,"sources":["types/index.ts","logic/index.ts","selectors/index.ts","state/reducer.ts","state/index.ts","components/CellText.tsx","components/Cell.tsx","components/GridCellContainer.tsx","components/Grid.tsx","components/Confetti.tsx","components/GameOverDialog.tsx","components/OutOfFlagsDialog.tsx","components/Configuration.tsx","components/Minesweeper.tsx","App.tsx","index.tsx"],"names":["CellStatus","GameStatus","coordinateToIndex","height","x","y","indexToCoordinate","index","Math","floor","getAdjacentIndexes","width","adjacentCoordinates","i","max","min","j","push","initBoard","mineCount","isSuperman","initialCell","status","Visible","Hidden","isMine","adjacentMinesCount","board","Array","fill","undefined","map","mineIndexes","Set","size","rand","random","add","has","filter","length","getCellByCoordinate","state","coordinate","getFlaggedCells","cell","Flagged","revealCell","InProgress","newBoard","Revealed","Lost","adjacentIndexes","currAdjacentIndexes","currIndex","revealClearAdjacentCells","nonRevealedCells","Won","minesweeperReducer","action","type","payload","flaggedCells","showOutOfFlags","remainingFlags","find","flagCell","emptyContext","dispatch","MinesweeperContext","React","createContext","origMinesweeperReducer","CellText","className","adjacentMinesCountName","n","Cell","useContext","toLowerCase","onClick","e","shiftKey","memo","props","style","rowIndex","columnIndex","areEqual","Grid","forwardRef","ref","containerHeight","containerWidth","columnCount","columnWidth","rowCount","rowHeight","GridCellContainer","Confetti","data-testid","GameOverDialog","onClose","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","messageByStatus","DialogActions","Button","color","autoFocus","useStyles","makeStyles","theme","createStyles","configuration","padding","spacing","sliders","display","inputContainer","flex","buttons","textAlign","margin","newGame","useState","setWidth","setHeight","setMineCount","classes","Typography","gutterBottom","Slider","value","valueLabelDisplay","onChange","event","newValue","variant","FormControlLabel","control","Switch","checked","name","label","Minesweeper","flagsLeft","useRef","current","scrollTo","scrollLeft","scrollTop","OutOfFlagsDialog","initialState","App","persistedState","useReducer","localforage","setItem","Provider","a","getItem","ReactDOM","render","StrictMode","document","getElementById","init"],"mappings":"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","file":"static/js/main.442201d4.chunk.js","sourcesContent":["export enum CellStatus {\n  Hidden,\n  Revealed,\n  Flagged,\n  Visible,\n}\n\nexport enum GameStatus {\n  InProgress,\n  Won,\n  Lost,\n}\n\nexport type Cell = {\n  status: CellStatus;\n  isMine: boolean;\n  adjacentMinesCount: number;\n};\n\nexport type Coordinate = {\n  x: number;\n  y: number;\n};\n\nexport type Board = Array<Cell>;\n\nexport type State = {\n  status: GameStatus;\n  board: Board;\n  width: number;\n  height: number;\n  mineCount: number;\n  showOutOfFlags?: boolean;\n  isSuperman?: boolean;\n};\n\nexport type Action =\n  | { type: \"CELL_REVEAL\"; payload: Coordinate }\n  | { type: \"CELL_FLAG\"; payload: Coordinate }\n  | { type: \"NEW_GAME\"; payload: State }\n  | { type: \"HIDE_OUT_OF_FLAGS\" }\n  | { type: \"TOGGLE_SUPERMAN\"; payload: boolean };\n\nexport type Context = {\n  state: State;\n  dispatch: React.Dispatch<Action>;\n};\n","import { Board, Coordinate, Cell, CellStatus } from \"../types\";\n\nexport const coordinateToIndex = ({ x, y }: Coordinate, height: number) =>\n  x * height + y;\n\nconst indexToCoordinate = (index: number, height: number) => ({\n  x: Math.floor(index / height),\n  y: index % height,\n});\n\nconst getAdjacentIndexes = (\n  { x, y }: Coordinate,\n  width: number,\n  height: number\n) => {\n  const adjacentCoordinates: Array<number> = [];\n\n  for (let i = Math.max(x - 1, 0); i <= Math.min(x + 1, width - 1); i++) {\n    for (let j = Math.max(y - 1, 0); j <= Math.min(y + 1, height - 1); j++) {\n      if (i === x && j === y) {\n        continue;\n      }\n\n      adjacentCoordinates.push(coordinateToIndex({ x: i, y: j }, height));\n    }\n  }\n\n  return adjacentCoordinates;\n};\n\nexport const initBoard = (\n  width: number,\n  height: number,\n  mineCount: number,\n  isSuperman?: boolean\n) => {\n  const initialCell: Cell = {\n    status: isSuperman ? CellStatus.Visible : CellStatus.Hidden,\n    isMine: false,\n    adjacentMinesCount: 0,\n  };\n\n  const board: Board = new Array(width * height).fill(undefined).map(() => ({\n    ...initialCell,\n  }));\n\n  const mineIndexes = new Set<number>();\n\n  while (mineIndexes.size < mineCount) {\n    const rand = Math.floor(Math.random() * width * height);\n    mineIndexes.add(rand);\n  }\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const index = coordinateToIndex({ x, y }, height);\n      board[index].isMine = mineIndexes.has(index);\n      board[index].adjacentMinesCount = getAdjacentIndexes(\n        { x, y },\n        width,\n        height\n      ).filter((index) => mineIndexes.has(index)).length;\n    }\n  }\n\n  return board;\n};\n\nexport const revealClearAdjacentCells = (\n  board: Board,\n  coordinate: Coordinate,\n  width: number,\n  height: number\n) => {\n  const newBoard = [...board];\n  const adjacentIndexes = new Set(\n    getAdjacentIndexes(coordinate, width, height).filter(\n      (index) => board[index].status !== CellStatus.Revealed\n    )\n  );\n\n  for (const index of adjacentIndexes) {\n    const cell = newBoard[index];\n\n    if (\n      cell.status === CellStatus.Hidden ||\n      cell.status === CellStatus.Visible\n    ) {\n      newBoard[index] = {\n        ...cell,\n        status: CellStatus.Revealed,\n      };\n\n      if (!cell.adjacentMinesCount) {\n        const currAdjacentIndexes = getAdjacentIndexes(\n          indexToCoordinate(index, height),\n          width,\n          height\n        );\n\n        for (const currIndex of currAdjacentIndexes) {\n          const cell = newBoard[currIndex];\n\n          if (\n            cell.status === CellStatus.Hidden ||\n            cell.status === CellStatus.Visible\n          ) {\n            adjacentIndexes.add(currIndex);\n          }\n        }\n      }\n    }\n  }\n\n  return newBoard;\n};\n","import { State, Coordinate, Cell, CellStatus } from \"../types\";\nimport { coordinateToIndex } from \"../logic\";\n\nexport const getCellByCoordinate = (\n  state: State,\n  coordinate: Coordinate\n): Cell => {\n  return state.board[coordinateToIndex(coordinate, state.height)];\n};\n\nexport const getFlaggedCells = (state: State): Cell[] => {\n  return state.board.filter((cell) => cell.status === CellStatus.Flagged);\n};\n","import {\n  State,\n  Action,\n  GameStatus,\n  Cell,\n  CellStatus,\n  Coordinate,\n  Board,\n} from \"../types\";\nimport { revealClearAdjacentCells, coordinateToIndex } from \"../logic\";\nimport { getCellByCoordinate, getFlaggedCells } from \"../selectors\";\n\nconst revealCell = ({\n  board,\n  coordinate,\n  cell,\n  width,\n  height,\n  mineCount,\n}: {\n  board: Board;\n  coordinate: Coordinate;\n  cell: Cell;\n  width: number;\n  height: number;\n  mineCount: number;\n}): [Board, GameStatus] => {\n  if (cell.status !== CellStatus.Hidden && cell.status !== CellStatus.Visible) {\n    return [board, GameStatus.InProgress];\n  }\n\n  let newBoard = [...board];\n  newBoard[coordinateToIndex(coordinate, height)] = {\n    ...cell,\n    status: CellStatus.Revealed,\n  };\n\n  if (cell.isMine) {\n    return [newBoard, GameStatus.Lost];\n  }\n\n  if (!cell.adjacentMinesCount) {\n    newBoard = revealClearAdjacentCells(newBoard, coordinate, width, height);\n  }\n  const nonRevealedCells = newBoard.filter(\n    (cell) => cell.status !== CellStatus.Revealed\n  );\n\n  return [\n    newBoard,\n    nonRevealedCells.length === mineCount\n      ? GameStatus.Won\n      : GameStatus.InProgress,\n  ];\n};\n\nconst flagCell = ({\n  board,\n  flaggedCells,\n  coordinate,\n  cell,\n  height,\n  mineCount,\n  isSuperman,\n}: {\n  board: Board;\n  flaggedCells: Cell[];\n  coordinate: Coordinate;\n  cell: Cell;\n  height: number;\n  mineCount: number;\n  isSuperman: boolean;\n}): [Board, GameStatus] => {\n  if (cell.status === CellStatus.Revealed) {\n    return [board, GameStatus.InProgress];\n  }\n\n  const remainingFlags = mineCount - flaggedCells.length;\n  const newBoard = [...board];\n  newBoard[coordinateToIndex(coordinate, height)] = {\n    ...cell,\n    status:\n      cell.status === CellStatus.Hidden || cell.status === CellStatus.Visible\n        ? CellStatus.Flagged\n        : isSuperman\n        ? CellStatus.Visible\n        : CellStatus.Hidden,\n  };\n\n  if (\n    cell.isMine &&\n    remainingFlags === 1 &&\n    !flaggedCells.find((cell) => !cell.isMine)\n  ) {\n    return [newBoard, GameStatus.Won];\n  }\n\n  return [newBoard, GameStatus.InProgress];\n};\n\nconst minesweeperReducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"CELL_REVEAL\": {\n      if (state.status !== GameStatus.InProgress) {\n        return state;\n      }\n\n      const cell = getCellByCoordinate(state, action.payload);\n      const [board, status] = revealCell({\n        ...state,\n        cell,\n        coordinate: action.payload,\n      });\n\n      return { ...state, board, status };\n    }\n\n    case \"CELL_FLAG\": {\n      if (state.status !== GameStatus.InProgress) {\n        return state;\n      }\n\n      const flaggedCells = getFlaggedCells(state);\n      const cell = getCellByCoordinate(state, action.payload);\n      const remainingFlags = state.mineCount - flaggedCells.length;\n\n      if (!remainingFlags && cell.status !== CellStatus.Flagged) {\n        return { ...state, showOutOfFlags: true };\n      }\n\n      const [board, status] = flagCell({\n        ...state,\n        flaggedCells,\n        cell,\n        coordinate: action.payload,\n        isSuperman: !!state.isSuperman,\n      });\n      return { ...state, board, status };\n    }\n\n    case \"NEW_GAME\": {\n      return action.payload;\n    }\n\n    case \"HIDE_OUT_OF_FLAGS\": {\n      return { ...state, showOutOfFlags: false };\n    }\n\n    case \"TOGGLE_SUPERMAN\": {\n      return {\n        ...state,\n        board: state.board.map((cell) => {\n          if (action.payload) {\n            if (cell.status === CellStatus.Hidden) {\n              return { ...cell, status: CellStatus.Visible };\n            }\n\n            return cell;\n          } else {\n            if (cell.status === CellStatus.Visible) {\n              return { ...cell, status: CellStatus.Hidden };\n            }\n\n            return cell;\n          }\n        }),\n        isSuperman: action.payload,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default minesweeperReducer;\n","import React from \"react\";\nimport { Context, GameStatus } from \"../types\";\nimport origMinesweeperReducer from \"./reducer\";\n\nexport const emptyContext: Context = {\n  state: {\n    status: GameStatus.InProgress,\n    board: [],\n    width: 1,\n    height: 2,\n    mineCount: 3,\n  },\n  dispatch: () => {},\n};\nexport const MinesweeperContext = React.createContext<Context>(emptyContext);\nexport const minesweeperReducer = origMinesweeperReducer;\n","import React from \"react\";\nimport { Cell, CellStatus } from \"../types\";\nimport \"./CellText.css\";\n\nconst CellText = ({ cell }: { cell: Cell }) => {\n  if (\n    cell.status === CellStatus.Revealed ||\n    cell.status === CellStatus.Visible\n  ) {\n    if (cell.isMine) {\n      return <i className=\"material-icons bomb\">new_releases</i>;\n    }\n\n    return <span>{cell.adjacentMinesCount || \"\"}</span>;\n  }\n\n  if (cell.status === CellStatus.Flagged) {\n    return <i className=\"material-icons flag\">tour</i>;\n  }\n\n  return <span></span>;\n};\n\nexport default CellText;\n","import React, { useContext } from \"react\";\nimport { Coordinate, CellStatus } from \"../types\";\nimport { MinesweeperContext } from \"../state\";\nimport { getCellByCoordinate } from \"../selectors\";\nimport CellText from \"./CellText\";\n\nconst adjacentMinesCountName = (n: number) => {\n  switch (n) {\n    case 1:\n      return \"one\";\n    case 2:\n      return \"two\";\n    case 3:\n      return \"three\";\n    case 4:\n      return \"four\";\n    case 5:\n      return \"five\";\n    case 6:\n      return \"six\";\n    case 7:\n      return \"seven\";\n    case 8:\n      return \"eight\";\n    default:\n      return \"\";\n  }\n};\n\nconst Cell = (coordinate: Coordinate) => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const cell = getCellByCoordinate(state, coordinate);\n  const onClick = (e: React.MouseEvent) => {\n    if (!e.shiftKey) {\n      dispatch({ type: \"CELL_REVEAL\", payload: coordinate });\n    } else {\n      dispatch({ type: \"CELL_FLAG\", payload: coordinate });\n    }\n  };\n\n  return (\n    <div\n      className={`cell-content ${CellStatus[\n        cell.status\n      ].toLowerCase()} ${adjacentMinesCountName(cell.adjacentMinesCount)}`}\n      onClick={onClick}\n    >\n      <CellText cell={cell} />\n    </div>\n  );\n};\n\nexport default Cell;\n","import React from \"react\";\nimport { GridChildComponentProps, areEqual } from \"react-window\";\nimport Cell from \"./Cell\";\nimport \"./GridCellContainer.css\";\n\nconst GridCellContainer = (props: GridChildComponentProps) => (\n  <div style={props.style}>\n    <div className=\"cell\">\n      <Cell y={props.rowIndex} x={props.columnIndex} />\n    </div>\n  </div>\n);\n\nexport default React.memo(GridCellContainer, areEqual);\n","import React, { useContext } from \"react\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { FixedSizeGrid } from \"react-window\";\nimport { MinesweeperContext } from \"../state\";\nimport GridCellContainer from \"./GridCellContainer\";\n\nconst Grid = React.forwardRef<FixedSizeGrid>((props, ref) => {\n  const { state } = useContext(MinesweeperContext);\n\n  return (\n    <AutoSizer>\n      {({ height: containerHeight, width: containerWidth }) => {\n        return (\n          <FixedSizeGrid\n            className=\"minesweeper-grid\"\n            columnCount={state.width}\n            columnWidth={50}\n            height={containerHeight}\n            rowCount={state.height}\n            rowHeight={50}\n            width={containerWidth}\n            ref={ref}\n          >\n            {GridCellContainer}\n          </FixedSizeGrid>\n        );\n      }}\n    </AutoSizer>\n  );\n});\n\nexport default Grid;\n","import React from \"react\";\nimport \"./Confetti.css\";\n\nconst Confetti = () => {\n  return (\n    <div data-testid=\"confetti\">\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n      <div className=\"confetti\" />\n    </div>\n  );\n};\n\nexport default Confetti;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { GameStatus } from \"../types\";\n\nconst messageByStatus = (status: GameStatus) => {\n  switch (status) {\n    case GameStatus.Won: {\n      return \"You win!\";\n    }\n    case GameStatus.Lost: {\n      return \"You lose :(\";\n    }\n    case GameStatus.InProgress: {\n      return \"Restarting...\";\n    }\n  }\n};\n\nconst GameOverDialog = ({\n  status,\n  onClose,\n}: {\n  status: GameStatus;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      open={status !== GameStatus.InProgress}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {messageByStatus(status)}\n      </DialogTitle>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" autoFocus>\n          Play again\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default GameOverDialog;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst GameOverDialog = ({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      open={open}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">No more flags left.</DialogTitle>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" autoFocus>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default GameOverDialog;\n","import React, { useState, useContext } from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { MinesweeperContext } from \"../state\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    configuration: {\n      padding: theme.spacing(1),\n    },\n    sliders: {\n      display: \"flex\",\n    },\n    inputContainer: {\n      padding: \"10px\",\n      flex: 1,\n    },\n    buttons: {\n      textAlign: \"left\",\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n    },\n  })\n);\n\nconst Configuration = ({\n  newGame,\n}: {\n  newGame: (width: number, height: number, mineCount: number) => void;\n}) => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const [width, setWidth] = useState<number>(state.width);\n  const [height, setHeight] = useState<number>(state.height);\n  const [mineCount, setMineCount] = useState<number>(state.mineCount);\n  const classes = useStyles();\n\n  const handleWidthChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setWidth(newValue as number);\n  };\n\n  const handleHeightChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setHeight(newValue as number);\n  };\n\n  const handleMineCountChange = (\n    event: React.ChangeEvent<{}>,\n    newValue: number | number[]\n  ) => {\n    setMineCount(newValue as number);\n  };\n\n  return (\n    <div className={classes.configuration}>\n      <div className={classes.sliders}>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Width</Typography>\n          <Slider\n            value={width}\n            min={3}\n            max={300}\n            valueLabelDisplay=\"auto\"\n            onChange={handleWidthChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Height</Typography>\n          <Slider\n            value={height}\n            min={3}\n            max={300}\n            valueLabelDisplay=\"auto\"\n            onChange={handleHeightChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n        <div className={classes.inputContainer}>\n          <Typography gutterBottom>Mines</Typography>\n          <Slider\n            value={mineCount}\n            min={1}\n            max={width * height}\n            valueLabelDisplay=\"auto\"\n            onChange={handleMineCountChange}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </div>\n      </div>\n      <div className={classes.buttons}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() =>\n            newGame(width, height, Math.min(mineCount, width * height))\n          }\n        >\n          New Game\n        </Button>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={state.isSuperman}\n              onChange={() =>\n                dispatch({\n                  type: \"TOGGLE_SUPERMAN\",\n                  payload: !state.isSuperman,\n                })\n              }\n              name=\"superman\"\n            />\n          }\n          label=\"Superman\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(Configuration);\n","import React, { useContext, useRef } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { FixedSizeGrid } from \"react-window\";\nimport Grid from \"./Grid\";\nimport Confetti from \"./Confetti\";\nimport GameOverDialog from \"./GameOverDialog\";\nimport OutOfFlagsDialog from \"./OutOfFlagsDialog\";\nimport Configuration from \"./Configuration\";\nimport { getFlaggedCells } from \"../selectors\";\nimport { MinesweeperContext } from \"../state\";\nimport { GameStatus } from \"../types\";\nimport { initBoard } from \"../logic\";\nimport \"./Minesweeper.css\";\n\nconst Minesweeper = () => {\n  const { state, dispatch } = useContext(MinesweeperContext);\n  const flagsLeft = state.mineCount - getFlaggedCells(state).length;\n  const ref = useRef<FixedSizeGrid>(null);\n\n  return (\n    <div className=\"minesweeper-container\">\n      {state.status === GameStatus.Won && <Confetti />}\n      <Configuration\n        newGame={(width, height, mineCount) => {\n          dispatch({\n            type: \"NEW_GAME\",\n            payload: {\n              status: GameStatus.InProgress,\n              width,\n              height,\n              mineCount,\n              board: initBoard(width, height, mineCount, state.isSuperman),\n              isSuperman: state.isSuperman,\n            },\n          });\n          ref.current?.scrollTo({ scrollLeft: 0, scrollTop: 0 });\n        }}\n      />\n      <OutOfFlagsDialog\n        open={!!state.showOutOfFlags}\n        onClose={() => dispatch({ type: \"HIDE_OUT_OF_FLAGS\" })}\n      />\n      <GameOverDialog\n        status={state.status}\n        onClose={() => {\n          dispatch({\n            type: \"NEW_GAME\",\n            payload: {\n              ...state,\n              status: GameStatus.InProgress,\n              board: initBoard(\n                state.width,\n                state.height,\n                state.mineCount,\n                state.isSuperman\n              ),\n            },\n          });\n          ref.current?.scrollTo({ scrollLeft: 0, scrollTop: 0 });\n        }}\n      />\n      <Typography gutterBottom>Flags left: {flagsLeft}</Typography>\n      <div className=\"grid-container\">\n        <Grid ref={ref} />\n      </div>\n    </div>\n  );\n};\n\nexport default Minesweeper;\n","import React, { useReducer } from \"react\";\nimport localforage from \"localforage\";\nimport { MinesweeperContext, minesweeperReducer } from \"./state\";\nimport { initBoard } from \"./logic\";\nimport Minesweeper from \"./components/Minesweeper\";\nimport { GameStatus, State } from \"./types\";\n\nconst width = 10;\nconst height = 10;\nconst mineCount = 10;\n\nconst initialState = {\n  status: GameStatus.InProgress,\n  board: initBoard(width, height, mineCount),\n  width,\n  height,\n  mineCount,\n};\n\nfunction App({ persistedState }: { persistedState: State }) {\n  const [state, dispatch] = useReducer(\n    minesweeperReducer,\n    persistedState || initialState\n  );\n  localforage.setItem(\"state\", state);\n\n  return (\n    <MinesweeperContext.Provider value={{ state, dispatch }}>\n      <Minesweeper />\n    </MinesweeperContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport localforage from \"localforage\";\nimport { State } from \"./types\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst init = async () => {\n  const persistedState: State = await localforage.getItem(\"state\");\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App persistedState={persistedState} />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\ninit();\n"],"sourceRoot":""}